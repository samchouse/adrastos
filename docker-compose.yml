name: adrastos
version: '3.9'

services:
  crdb:
    image: cockroachdb/cockroach:latest
    profiles:
      - db
    ports:
      - 26257:26257
      - 8080:8080
    command: start-single-node --insecure
    environment:
      - COCKROACH_DATABASE=adrastos
    volumes:
      - crdb:/cockroach/cockroach-data

  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
    profiles:
      - db
    ulimits:
      memlock: -1
    ports:
      - 6379:6379
    volumes:
      - dragonfly:/data

  app:
    image: ghcr.io/xenfo/adrastos-app:latest
    restart: always
    profiles:
      - deploy
    ports:
      - 8000:8000
    volumes:
      - ./certs:/work/certs
      - ~/.postgresql/root.crt:/work/certs/cockroach.crt
    env_file:
      - .env

  emails:
    image: ghcr.io/xenfo/adrastos-emails:latest
    restart: always
    profiles:
      - deploy
    env_file:
      - .env

  nginx:
    image: nginx:latest
    restart: always
    profiles:
      - deploy
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/acme-challenge.conf:/etc/nginx/acme-challenge.conf
      - /var/www/certbot:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt
    environment:
      keysize: 4096
      domains: ${DOMAINS}
    entrypoint:
      - /bin/sh
      - -c
      - |
        echo "--------------------------------------------------------------------------------------------"
        [-] nginx init
        echo "--------------------------------------------------------------------------------------------"
        echo 
        ls -la /etc/nginx/conf.d
        [ ! -d "/etc/letsencrypt" ] && mkdir /etc/letsencrypt
        for domain in $$domains; do
        
          echo [-] $$domain \(keysize: $$keysize\)
          echo
          
          [ -d "/etc/letsencrypt/staging/$$domain" ] || mkdir -p /etc/letsencrypt/staging/$$domain
          if [ ! -f "/etc/letsencrypt/staging/$$domain/privkey.pem" ] || [ ! -f "/etc/letsencrypt/staging/$$domain/fullchain.pem" ]; then
            sed -i 's/live/staging/g' /etc/nginx/conf.d/$$domain.conf
            openssl req -x509 -nodes -newkey rsa:$$keysize -days 1 -keyout "/etc/letsencrypt/staging/$$domain/privkey.pem" -out "/etc/letsencrypt/staging/$$domain/fullchain.pem" -subj "/CN=localhost"
            echo
          fi
          sleep 5s
        done
        if [ ! -f "/etc/letsencrypt/ssl-dhparams.pem" ]; then
          curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot/certbot/ssl-dhparams.pem > "/etc/letsencrypt/ssl-dhparams.pem"
          ls /etc/letsencrypt
          echo 
        fi
        if [ ! -f "/etc/nginx/options-ssl-nginx.conf" ]; then
          curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf > "/etc/nginx/options-ssl-nginx.conf"
          ls /etc/nginx
          echo 
        fi
        echo "--------------------------------------------------------------------------------------------"
        echo [-] nginx-watch-reload init
        echo "--------------------------------------------------------------------------------------------"
        while :
        do
          for domain in $$domains; do
            echo [-] nginx $$domain
            [ -d "/etc/letsencrypt/live/$$domain" ] && ls /etc/letsencrypt/live/$$domain
            [ -f "/etc/letsencrypt/live/$$domain/.certbot" ] && nginx -s reload
            [ -f "/etc/letsencrypt/live/$$domain/.certbot" ] && rm /etc/letsencrypt/live/$$domain/.certbot
          done
          echo [-] sleep 30s
          sleep 30s
        done & nginx -g "daemon off;"
        echo "--------------------------------------------------------------------------------------------"
        echo
    depends_on:
      - app
      - emails

  certbot:
    image: certbot/certbot:latest
    restart: always
    profiles:
      - deploy
    volumes:
      - /var/www/certbot:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt
      - ./nginx/conf.d:/etc/nginx/conf.d
    environment:
      keysize: 4096
      email: ${EMAIL}
      domains: ${DOMAINS}
      staging: ${STAGING}
    entrypoint:
      - /bin/sh
      - -c
      - |
        echo [-] sleep 30s
        sleep 30s
        echo "--------------------------------------------------------------------------------------------"
        echo [-] certbot init
        echo "--------------------------------------------------------------------------------------------"
        echo 
        for domain in $$domains; do
          echo [-] $$domain \(keysize: $$keysize\)
          echo
          [ -d "/etc/letsencrypt/staging/$$domain" ] || mkdir -p /etc/letsencrypt/staging
          
          [ -d "/etc/letsencrypt/renewal/$$domain" ] || mkdir -p /etc/letsencrypt/renewal
          [ -d "/etc/letsencrypt/live/$$domain" ] || mkdir -p /etc/letsencrypt/live
          if [ "$$staging" = "false" ] && [ ! -f "/etc/letsencrypt/live/$$domain/.certbot" ]; then
            echo [-] $$domain staging false
            certbot certonly -v --webroot -w /var/www/certbot -d $$domain --email $$email --rsa-key-size $$keysize --agree-tos --force-renewal
            [ -f "/etc/letsencrypt/live/$$domain/.certbot" ] || touch /etc/letsencrypt/live/$$domain/.certbot
            sed -i 's/staging/live/g' /etc/nginx/conf.d/$$domain.conf
            echo [-] --- complete --- $$domain
            sleep 5s
          fi
          if [ "$$staging" = "true" ] && [ ! -f "/etc/letsencrypt/live/$$domain/.certbot" ]; then
            echo [-] $$domain staging true
            certbot certonly -v --staging --webroot -w /var/www/certbot -d $$domain --email $$email --rsa-key-size $$keysize --agree-tos --force-renewal
            [ -f "/etc/letsencrypt/live/$$domain/.certbot" ] || touch /etc/letsencrypt/live/$$domain/.certbot
            sed -i 's/staging/live/g' /etc/nginx/conf.d/$$domain.conf
            echo [-] --- complete --- $$domain
            sleep 5s
          fi
          
          sleep 10s
        done
        echo [-] sleep 10s
        sleep 10s
        echo "--------------------------------------------------------------------------------------------"
        echo [-] certbot init renew timer
        echo "--------------------------------------------------------------------------------------------"
        echo 
        trap exit TERM
        while :
        do
          echo [-] certbot renew
          [ -d "/etc/letsencrypt/renewal" ] && ls -l /etc/letsencrypt/renewal
          certbot renew
          [ -f "/etc/letsencrypt/live/$$domain/.certbot" ] || touch /etc/letsencrypt/live/$$domain/.certbot
          echo [-] sleep 30s
          sleep 30s
        done
    depends_on: 
      - nginx

volumes:
  crdb:
  dragonfly:
